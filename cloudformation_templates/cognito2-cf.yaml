Description: Create base Cognito User Pool / Identify Pool with IAM Roles
AWSTemplateFormatVersion: 2010-09-09
Parameters:
  env:
    Type: String
  allowUnauthenticatedIdentities:
    Type: String
  mfaConfiguration:
    Type: String
  emailVerificationSubject:
    Type: String
  emailVerificationMessage:
    Type: String
    Default: "Your verification code is {####}."
  passwordPolicyMinLength:
    Type: String
  userpoolClientGenerateSecret:
    Type: String
  userpoolClientRefreshTokenValidity:
    Type: String
  UserPoolDomainValue:
    Type: String
    Default: ''
  usernameAttributes:
    Type: String
Conditions:
  IncludeUserPoolDomain: !Not 
    - !Equals 
      - !Ref UserPoolDomainValue
      - ''
  ShouldNotCreateEnvResources:
    Fn::Equals:
      - Ref: env
      - NONE
  ShouldOutputAppClientSecrets:
    Fn::Equals:
      - Ref: userpoolClientGenerateSecret
      - true
Resources:
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AutoVerifiedAttributes:
        - email
      EmailVerificationMessage:
        Ref: emailVerificationMessage
      EmailVerificationSubject:
        Ref: emailVerificationSubject
      MfaConfiguration:
        Ref: mfaConfiguration
      EmailConfiguration:
        EmailSendingAccount: COGNITO_DEFAULT
      Policies:
        PasswordPolicy:
          MinimumLength:
            Ref: passwordPolicyMinLength
          RequireLowercase: false
          RequireNumbers: false
          RequireSymbols: false
          RequireUppercase: false
      Schema:
        - Mutable: false
          Name: email
          Required: true
        - Mutable: false
          Name: family_name
          Required: true
        - Mutable: false
          Name: name
          Required: true
      UsernameAttributes: !Split [',', !Ref usernameAttributes]
      UsernameConfiguration:
        CaseSensitive: false
      UserPoolName: !Join 
        - ''
        - - !Ref AWS::StackName
          - 'UserPool'
  UserPoolDomain: 
    Type: AWS::Cognito::UserPoolDomain 
    Condition: IncludeUserPoolDomain
    Properties:
      UserPoolId: !Ref UserPool 
      Domain: !Ref UserPoolDomainValue
  UserPoolClientWeb:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId:
        Ref: UserPool
      ClientName: awsampac4f6cc9_app_clientWeb
      RefreshTokenValidity:
        Ref: userpoolClientRefreshTokenValidity
      TokenValidityUnits:
        RefreshToken: days
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId:
        Ref: UserPool
      ClientName: awsampac4f6cc9_app_client
      GenerateSecret:
        Ref: userpoolClientGenerateSecret
      RefreshTokenValidity:
        Ref: userpoolClientRefreshTokenValidity
      TokenValidityUnits:
        RefreshToken: days
  UserPoolClientRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      RoleName: !Join 
        - ''
        - - !Ref AWS::StackName
          - 'UserPoolClientRole'
    DependsOn:
      - UserPoolClient
  UserPoolClientLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: >
          const response = require('cfn-response');

          const aws = require('aws-sdk');

          const identity = new aws.CognitoIdentityServiceProvider();

          exports.handler = (event, context, callback) => {
            if (event.RequestType == 'Delete') {
              response.send(event, context, response.SUCCESS, {});
            }
            if (event.RequestType == 'Update' || event.RequestType == 'Create') {
              const params = {
                ClientId: event.ResourceProperties.clientId,
                UserPoolId: event.ResourceProperties.userpoolId,
              };
              identity
                .describeUserPoolClient(params)
                .promise()
                .then(res => {
                  response.send(event, context, response.SUCCESS, { appSecret: res.UserPoolClient.ClientSecret });
                })
                .catch(err => {
                  response.send(event, context, response.FAILED, { err });
                });
            }
          };
      Role:
        Fn::GetAtt:
          - UserPoolClientRole
          - Arn
      Handler: index.handler
      Runtime: nodejs14.x
      Timeout: 300
  UserPoolClientLambdaPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - cognito-idp:DescribeUserPoolClient
            Resource:
              Fn::GetAtt:
                - UserPool
                - Arn
      PolicyName: awsampac4f6cc9_userpoolclient_lambda_iam_policy
      Roles:
        - Ref: UserPoolClientRole
    DependsOn:
      - UserPoolClientLambda
  UserPoolClientLogPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource:
              Fn::Sub:
                - arn:aws:logs:${region}:${account}:log-group:/aws/lambda/${lambda}:log-stream:*
                - region:
                    Ref: AWS::Region
                  account:
                    Ref: AWS::AccountId
                  lambda:
                    Ref: UserPoolClientLambda
      PolicyName: awsampac4f6cc9_userpoolclient_lambda_log_policy
      Roles:
        - Ref: UserPoolClientRole
    DependsOn:
      - UserPoolClientLambdaPolicy
  UserPoolClientInputs:
    Type: Custom::LambdaCallout
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - UserPoolClientLambda
          - Arn
      clientId:
        Ref: UserPoolClient
      userpoolId:
        Ref: UserPool
    DependsOn:
      - UserPoolClientLogPolicy
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
  IdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      AllowUnauthenticatedIdentities:
        Ref: allowUnauthenticatedIdentities
      CognitoIdentityProviders:
        - ClientId:
            Ref: UserPoolClient
          ProviderName:
            Fn::Sub:
              - cognito-idp.${region}.amazonaws.com/${client}
              - region:
                  Ref: AWS::Region
                client:
                  Ref: UserPool
        - ClientId:
            Ref: UserPoolClientWeb
          ProviderName:
            Fn::Sub:
              - cognito-idp.${region}.amazonaws.com/${client}
              - region:
                  Ref: AWS::Region
                client:
                  Ref: UserPool
      IdentityPoolName:
        Fn::If:
          - ShouldNotCreateEnvResources
          - awsamplifygraphqlac4f6cc9_identitypool_ac4f6cc9
          - Fn::Join:
              - ""
              - - awsamplifygraphqlac4f6cc9_identitypool_ac4f6cc9__
                - Ref: env
    DependsOn:
      - UserPoolClientInputs
  IdentityPoolRoleMap:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId:
        Ref: IdentityPool
      Roles:
        unauthenticated: !GetAtt UnauthRole.Arn
        authenticated: !GetAtt AuthRole.Arn
  AuthRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ""
            Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: sts:AssumeRoleWithWebIdentity
      RoleName: !Join 
        - ''
        - - !Ref AWS::StackName
          - 'AuthRole'
  UnauthRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ""
            Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: sts:AssumeRoleWithWebIdentity
      RoleName: !Join 
        - ''
        - - !Ref AWS::StackName
          - 'UnauthRole'
Outputs:
  IdentityPoolId:
    Description: Id for the identity pool
    Value:
      Ref: IdentityPool
  IdentityPoolName:
    Value:
      Fn::GetAtt:
        - IdentityPool
        - Name
  UserPoolId:
    Description: Id for the user pool
    Value:
      Ref: UserPool
  UserPoolArn:
    Description: Arn for the user pool
    Value:
      Fn::GetAtt:
        - UserPool
        - Arn
  UserPoolName:
    Value: !Join 
      - ''
      - - !Ref AWS::StackName
        - 'UserPool'
  AppClientIDWeb:
    Description: The user pool app client id for web
    Value:
      Ref: UserPoolClientWeb
  AppClientID:
    Description: The user pool app client id
    Value:
      Ref: UserPoolClient
  AppClientSecret:
    Value:
      Fn::GetAtt:
        - UserPoolClientInputs
        - appSecret
    Condition: ShouldOutputAppClientSecrets
