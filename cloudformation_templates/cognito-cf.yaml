AWSTemplateFormatVersion: "2010-09-09"
Description: "(SO0042) - aws-content-analysis. Deploys the AWS Content Analysis Application Cognito Infrastructure"

Resources:
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: True
        InviteMessageTemplate:
          EmailMessage: !Join ["", [
            "Your username is {username} and temporary password is {####}<br>AWS CloudFormation stack:<br>",
            "https://",
            Ref: AWS::Region,
            ".console.aws.amazon.com/cloudformation/home?region=",
            Ref: AWS::Region,
            "#/stacks/stackinfo?stackId="
          ]]
          EmailSubject: "Welcome to AWS Content Analysis"
      EmailConfiguration:
        EmailSendingAccount: 'COGNITO_DEFAULT'
      AutoVerifiedAttributes: ['email']

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref CognitoUserPool

    # Service - cognito / security infrastructure

    # Super hacky lambda for formatting cognito role mapping since cognito is severely lacking in CF support
    # https://forums.aws.amazon.com/message.jspa?messageID=790437#790437
    # https://stackoverflow.com/questions/53131052/aws-cloudformation-can-not-create-stack-when-awscognitoidentitypoolroleattac

  CognitoRoleMappingTransformer:
      Type: AWS::Lambda::Function
      Properties:
        Code:
          ZipFile: |
            import json
            import cfnresponse

            def handler(event, context):
                print("Event: %s" % json.dumps(event))
                resourceProperties = event["ResourceProperties"]
                responseData = {
                    "RoleMapping": {
                        resourceProperties["IdentityProvider"]: {
                            "Type": resourceProperties["Type"]
                        }
                    }
                }
                if resourceProperties["AmbiguousRoleResolution"]:
                    responseData["RoleMapping"][resourceProperties["IdentityProvider"]]["AmbiguousRoleResolution"] = \
                    resourceProperties["AmbiguousRoleResolution"]

                print(responseData)
                cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
        Handler: !Join
          - ''
          - - index
            - .handler
        Role: !GetAtt CognitoRoleMapperLambdaExecutionRole.Arn
        Runtime: python3.7
        Timeout: 30

  CognitoRoleMapperLambdaExecutionRole:
      Type: 'AWS::IAM::Role'
      Properties:
        AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - 'sts:AssumeRole'
        Path: /
        Policies:
          - PolicyName: root
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Action:
                    - 'logs:CreateLogGroup'
                    - 'logs:CreateLogStream'
                    - 'logs:PutLogEvents'
                  Resource: 'arn:aws:logs:*:*:*'

  CognitoIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      AllowUnauthenticatedIdentities: False
      CognitoIdentityProviders:
        - ClientId: !Ref CognitoUserPoolClient
          ProviderName: !GetAtt CognitoUserPool.ProviderName

  # More hacky cfn for getting the role mapping
  TransformedRoleMapping:
    Type: Custom::TransformedRoleMapping
    Properties:
      ServiceToken: !GetAtt CognitoRoleMappingTransformer.Arn
      Type: Token
      AmbiguousRoleResolution: Deny
      IdentityProvider:
        'Fn::Join':
          - ':'
          - - 'Fn::GetAtt':
              - CognitoUserPool
              - ProviderName
            - Ref: CognitoUserPoolClient

  CognitoStandardAuthDefaultRole:
    Type: "AWS::IAM::Role"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: F38
            reason: "The wildcard is used for a deny action, not an allow action."
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Federated: "cognito-identity.amazonaws.com"
            Action:
              - "sts:AssumeRoleWithWebIdentity"
      Policies:
        - PolicyName: !Sub "${AWS::StackName}-AuthNoGroup"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action: "*"
                Resource: "*"
                Effect: "Deny"

  CognitoStandardUnauthDefaultRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Federated: "cognito-identity.amazonaws.com"
            Action:
              - "sts:AssumeRoleWithWebIdentity"

  CognitoIdentityPoolRoleMapping:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref CognitoIdentityPool
      RoleMappings: !GetAtt TransformedRoleMapping.RoleMapping
      Roles:
        authenticated: !GetAtt CognitoStandardAuthDefaultRole.Arn
        unauthenticated: !GetAtt CognitoStandardUnauthDefaultRole.Arn

  CognitoUserPoolGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      Description: 'User group for AWS Content Analysis Admins'
      RoleArn: !GetAtt CognitoUserPoolGroupIAMRole.Arn
      UserPoolId: !Ref CognitoUserPool
      GroupName: !Sub "${AWS::StackName}-Admins"

  # TODO: Need to add S3 put access to dataplane bucket on public/upload/*
  CognitoUserPoolGroupIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Federated: "cognito-identity.amazonaws.com"
            Action:
              - "sts:AssumeRoleWithWebIdentity"
      Policies:
        - PolicyName:  !Sub "${AWS::StackName}-AdminPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action: "s3:*"
                Resource: "arn:aws:s3:::*"
                Effect: "Allow"

Outputs:
  UserPoolGroupIAMRoleArn:
    Value: !GetAtt CognitoUserPoolGroupIAMRole.Arn
  UserPoolId:
    Value: !Ref CognitoUserPool
  IdentityPoolId:
    Value: !Ref CognitoIdentityPool
  UserPoolClientId:
    Value: !Ref CognitoUserPoolClient
