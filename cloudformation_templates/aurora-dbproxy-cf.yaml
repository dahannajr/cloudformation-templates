AWSTemplateFormatVersion: '2010-09-09'
Description: "AWS Aurora MySql, Do Not Remove Apache License Version 2.0 (qs-) Jun,15,2019"
Metadata:
  LICENSE: Apache License Version 2.0
Parameters:
  DBMultiAZ:
    AllowedValues:
      - "true"
      - "false"
    Default: "true"
    Description: "Specifies if the database instance is a multiple Availability Zone deployment. Not applicable for Aurora Serverless."
    Type: String
  DBAllocatedStorageEncrypted:
    Default: "true"
    AllowedValues:
      - "true"
      - "false"
    Description: Whether or not to encrypt the database.
    Type: String
  DBCWLogExports:
    Type: CommaDelimitedList
    Default: ''
    Description: "Specify comma delimited list of Database logs ( error, slowquery, audit ) to export to CloudWatch Logs."
  RotateDBPassword:
    Default: "false"
    AllowedValues:
      - "true"
      - "false"
    Description: Whether or not to rotate the database password on a schedule (every 89 days).
    Type: String
  DBAutoMinorVersionUpgrade:
    AllowedValues:
      - "true"
      - "false"
    Default: "false"
    Description: "Select true to enable auto minor version upgrade."
    Type: String
  DBBackupRetentionPeriod:
    Default: 35
    Description: "The number of days for which automatic database snapshots are retained from 1 to 35 days."
    Type: Number
    MinValue: 1
    MaxValue: 35
  DBEngineVersion:
    Description: Select Database Engine Version
    Type: String
    Default: 'Aurora-MySQL5.7-2.08.2'
    AllowedValues:
      - 'Aurora-MySQL5.7-2.06.0'
      - 'Aurora-MySQL5.7-2.07.2'
      - 'Aurora-MySQL5.7-2.08.2'
      - 'Aurora-PostgreSQL11.6'
  DBEngineMode:
    Description: The engine mode of the cluster. Currently Aurora Serverless, Global Database and Multi-Master is available for Aurora-MySQL5.6.10a. Aurora Parallel Query is available for Aurora MySQL5.6-x versions.
    Type: String
    Default: 'provisioned'
    AllowedValues:
      - 'provisioned'
      - 'parallelquery'
      - 'serverless'
      - 'global'
      - 'multimaster'
  DBInstanceClass:
    AllowedValues:
      - db.r5.12xlarge
      - db.r5.4xlarge
      - db.r5.2xlarge
      - db.r5.xlarge
      - db.r5.large
      - db.r4.16xlarge
      - db.r4.8xlarge
      - db.r4.4xlarge
      - db.r4.2xlarge
      - db.r4.xlarge
      - db.r4.large
    ConstraintDescription: "Must select a valid database instance type."
    Default: db.r4.large
    Description: "The name of the compute and memory capacity class of the database instance. Not Applicable for Aurora Serverless. Supported instance types for Aurora Multi-Master is db.r4.[2/4/8]xlarge only currently."
    Type: String
  DBAccessCIDR:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$"
    ConstraintDescription: "CIDR block parameter must be in the form x.x.x.x/x"
    Description: "Allowed CIDR block for external access (use VPC CIDR)."
    Type: String
    Default: 10.0.0.0/16
  DBSnapshotIdentifier:
    Description: 'ARN if restoring from a manual snapshot'
    Type: String
    Default: ''
  DBMasterUserPassword:
    AllowedPattern: ^(?=^.{8,255}$)(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^A-Za-z0-9])(?!.*[@/"']).*$
    ConstraintDescription: "Min 8 chars. Must include 1 uppercase, 1 lowercase, 1 number, 1 (non / @ \" ') symbol"
    Description: "The database admin account password.Min 8 chars. Must include 1 uppercase, 1 lowercase, 1 number, 1 (non / @ \" ') symbol."
    MaxLength: "64"
    MinLength: "8"
    NoEcho: "True"
    Type: String
  DBMasterUsername:
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    ConstraintDescription: "Must begin with a letter and contain only alphanumeric characters."
    Default: msadmin
    Description: "The database admin account username."
    MaxLength: "16"
    MinLength: "1"
    Type: String
  DBPort:
    Default: 3306
    Description: "The port on which the DB instance will listen for connections. Aurora Serverless currently supports port 3306 only."
    Type: Number
    ConstraintDescription: 'Must be in the range [1150-65535].'
    MinValue: 1150
    MaxValue: 65535
  DBName:
    Default: 'AuroraMySQLDB'
    Description: "Name of the Amazon Aurora database."
    MaxLength: "63"
    MinLength: "3"
    Type: String
  CustomDBSecurityGroup:
    Description: "ID of the security group (e.g., sg-0234se). One will be created for you if left empty."
    Type: String
    Default: ''
  EnvironmentStage:
    Type: String
    Description: Designates the environment stage of the associated AWS resource. (Optional)
    AllowedValues:
      - dev
      - test
      - pre-prod
      - prod
      - none
    Default: none
  Confidentiality:
    Type: String
    Default: ''
    Description: Designates the confidentiality classification of the data that is associated with the resource. (Optional)
    AllowedValues:
      - public
      - private
      - confidential
      - pii/phi
      - ''
  Compliance:
    Type: String
    Default: ''
    Description: Designates the compliance level for the AWS resource. (Optional)
    AllowedValues:
      - hipaa
      - sox
      - fips
      - other
      - ''
  ServerlessMinCapacityUnit:
    Description: The minimum capacity for an Aurora DB cluster in serverless DB engine mode. The minimum capacity must be less than or equal to the maximum capacity.
    Type: String
    Default: '2'
    AllowedValues:
      - '1'
      - '2'
      - '4'
      - '8'
      - '16'
      - '32'
      - '64'
      - '128'
      - '256'
  ServerlessMaxCapacityUnit:
    Description: The maximum capacity for an Aurora DB cluster in serverless DB engine mode. The maximum capacity must be greater than or equal to the minimum capacity.
    Type: String
    Default: '64'
    AllowedValues:
      - '1'
      - '2'
      - '4'
      - '8'
      - '16'
      - '32'
      - '64'
      - '128'
      - '256'
  ServerlessAutoPause:
    Description: Specifies whether to allow or disallow automatic pause for an Aurora DB cluster in serverless DB engine mode. A DB cluster can be paused only when its idle (it has no connections).
    Type: String
    Default: 'false'
    AllowedValues:
      - 'true'
      - 'false'
  ServerlessSecondsUntilAutoPause:
    Description: The time, in seconds, before an Aurora DB cluster in serverless mode is auto paused. Min = 300, Max = 86400 (24hrs)
    Type: Number
    Default: 300
    MaxValue: 86400
    MinValue: 300
  VPCStackName:
    Description: The value used for the name tag of the bastion host
    Type: String
  QSS3KeyPrefix:
    Description: Location of Lambda function for key rotation
    Type: String
    Default: ''
  QSS3BucketName:
    Description: Location bucket of Lambda function for key rotation
    Type: String
    Default: ''
  ApplicationVersion:
    Type: String
    Default: ''
  ProjectCostCenter:
    Type: String
    Default: ''
  ApplicationName:
    Type: String
    Default: ''
  NotificationList:
    Type: String
    Default: ''
Mappings:
  DBFamilyMap:
    "Aurora-MySQL5.7-2.06.0":
      "family": "aurora-mysql5.7"
    "Aurora-MySQL5.7-2.07.2":
      "family": "aurora-mysql5.7"
    "Aurora-MySQL5.7-2.08.2":
      "family": "aurora-mysql5.7"
    "Aurora-PostgreSQL11.6":
      "family": "aurora-postgresql11"
  DBEngineVersionMap:
    "Aurora-MySQL5.7-2.06.0":
      "engineversion": "5.7.mysql_aurora.2.06.0"
    "Aurora-MySQL5.7-2.07.2":
      "engineversion": "5.7.mysql_aurora.2.07.2"
    "Aurora-MySQL5.7-2.08.2":
      "engineversion": "5.7.mysql_aurora.2.08.2"
    "Aurora-PostgreSQL11.6":
      "engineversion": "11.6"
  DBEngineNameMap:
    "Aurora-MySQL5.7-2.06.0":
      "enginename": "aurora-mysql"
    "Aurora-MySQL5.7-2.07.2":
      "enginename": "aurora-mysql"
    "Aurora-MySQL5.7-2.08.2":
      "enginename": "aurora-mysql"
    "Aurora-PostgreSQL11.6":
      "enginename": "aurora-postgresql"
  DBEngineFamily:
    "Aurora-MySQL5.7-2.06.0":
      "enginefamily": "MYSQL"
    "Aurora-MySQL5.7-2.07.2":
      "enginefamily": "MYSQL"
    "Aurora-MySQL5.7-2.08.2":
      "enginefamily": "MYSQL"
    "Aurora-PostgreSQL11.6":
      "enginefamily": "MYSQL"
Conditions:
  DBPasswordRotation:
    !Equals
    - !Ref RotateDBPassword
    - 'true'
  IsServerlessEnabled:
    !Equals
    - !Ref DBEngineMode
    - 'serverless'
  IsServerlessDisabled:
    !Not
      - !Equals
        - !Ref DBEngineMode
        - 'serverless'
  IsDBMultiAZ:
    !And
    - !Equals
      - !Ref DBMultiAZ
      - 'true'
    - !Or
      - !Equals
        - !Ref DBEngineMode
        - 'provisioned'
      - !Equals
        - !Ref DBEngineMode
        - 'parallelquery'
      - !Equals
        - !Ref DBEngineMode
        - 'global'
      - !Equals
        - !Ref DBEngineMode
        - 'multimaster'
  EnableIAMDBAuth:
    !Or
    - !Equals
      - !Ref DBEngineMode
      - 'provisioned'
    - !Equals
      - !Ref DBEngineMode
      - 'global'
    - !Equals
      - !Ref DBEngineMode
      - 'multimaster'
  EnablePI:
    !And
    - !Equals
      - !Ref DBEngineMode
      - 'provisioned'
    - !Equals
      - !Ref DBEngineMode
      - 'global'
  EnableBackTrack:
    !And
    - !Equals
      - !Ref DBEngineMode
      - 'provisioned'
    - !Equals
      - !FindInMap [DBFamilyMap, !Ref DBEngineVersion, "family"]
      - 'aurora5.6'
  DoEnableCWLogExport: !And [!Not [!Equals [!Join ['', !Ref DBCWLogExports], '']], !Condition IsServerlessDisabled]
  DoCreateDatabase:
    !And 
      - !Not
        - !Equals
          - !Ref DBName
          - ''
      - !Not 
        - !Condition DoRestoreFromSnapshot
  DoRestoreFromSnapshot:
    !Not
    - !Equals
      - !Ref DBSnapshotIdentifier
      - ''
  UseDatabaseEncryption:
    !Equals
    - !Ref DBAllocatedStorageEncrypted
    - true
  CreateSecurityGroup:
    !Equals
    - !Ref CustomDBSecurityGroup
    - ''
  IsMYSQLEngineCondition:
    !Equals
    - !FindInMap [DBEngineFamily, !Ref DBEngineVersion, "enginefamily"]
    - 'MYSQL'
  IsNotMYSQLCondition:
    !Not 
      - !Equals
        - !FindInMap [DBEngineFamily, !Ref DBEngineVersion, "enginefamily"]
        - 'MYSQL'
Resources:
  MonitoringIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "monitoring.rds.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonRDSEnhancedMonitoringRole
  DBSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint: !Ref NotificationList
          Protocol: email
  EncryptionKey:
    DeletionPolicy: Retain
    Type: AWS::KMS::Key
    Properties:
      KeyPolicy:
        Version: 2012-10-17
        Id: !Ref AWS::StackName
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action: 'kms:*'
            Resource: '*'
          - Effect: Allow
            Principal:
              AWS: '*'
            Action:
              - 'kms:Encrypt'
              - 'kms:Decrypt'
              - 'kms:ReEncrypt*'
              - 'kms:GenerateDataKey*'
              - 'kms:CreateGrant'
              - 'kms:ListGrants'
              - 'kms:DescribeKey'
            Resource: '*'
            Condition:
              StringEquals:
                'kms:CallerAccount': !Ref 'AWS::AccountId'
                'kms:ViaService': !Sub 'rds.${AWS::Region}.amazonaws.com'
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
  EncryptionKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub "alias/${AWS::StackName}"
      TargetKeyId: !Ref EncryptionKey
  AuroraDB1:
    Condition: IsServerlessDisabled
    Properties:
      AutoMinorVersionUpgrade: !Ref DBAutoMinorVersionUpgrade
      DBClusterIdentifier: !Ref AuroraDBCluster
      DBInstanceClass: !Ref DBInstanceClass
      Engine: !FindInMap [DBEngineNameMap, !Ref DBEngineVersion, "enginename"]
      DBParameterGroupName: !Ref DBParamGroup
      PubliclyAccessible: false
      MonitoringInterval: 1
      MonitoringRoleArn: !GetAtt MonitoringIAMRole.Arn
      EnablePerformanceInsights: !If [EnablePI, true, !Ref 'AWS::NoValue']
      PerformanceInsightsKMSKeyId: !If [EnablePI, !Ref EncryptionKey, !Ref 'AWS::NoValue']
      PerformanceInsightsRetentionPeriod: !If [EnablePI, 7, !Ref 'AWS::NoValue']
      CopyTagsToSnapshot: true
      Tags:
        -
          Key: Name
          Value: !Sub AuroraDB-${AWS::StackName}
        -
          Key: EnvironmentStage
          Value: !Ref EnvironmentStage
        -
          Key: Application
          Value: !Ref ApplicationName
        -
          Key: ApplicationVersion
          Value: !Ref ApplicationVersion
        -
          Key: ProjectCostCenter
          Value: !Ref ProjectCostCenter
        -
          Key: Confidentiality
          Value: !Ref Confidentiality
        -
          Key: Compliance
          Value: !Ref Compliance
    Type: "AWS::RDS::DBInstance"
  AuroraDB2:
    Condition: IsDBMultiAZ
    Properties:
      AutoMinorVersionUpgrade: !Ref DBAutoMinorVersionUpgrade
      DBClusterIdentifier: !Ref AuroraDBCluster
      DBInstanceClass: !Ref DBInstanceClass
      Engine: !FindInMap [DBEngineNameMap, !Ref DBEngineVersion, "enginename"]
      DBParameterGroupName: !Ref DBParamGroup
      PubliclyAccessible: false
      MonitoringInterval: 1
      MonitoringRoleArn: !GetAtt MonitoringIAMRole.Arn
      EnablePerformanceInsights: !If [EnablePI, true, !Ref 'AWS::NoValue']
      PerformanceInsightsKMSKeyId: !If [EnablePI, !Ref EncryptionKey, !Ref 'AWS::NoValue']
      PerformanceInsightsRetentionPeriod: !If [EnablePI, 7, !Ref 'AWS::NoValue']
      CopyTagsToSnapshot: true
      Tags:
        -
          Key: Name
          Value: !Sub AuroraDB-${AWS::StackName}
        -
          Key: EnvironmentStage
          Value: !Ref EnvironmentStage
        -
          Key: Application
          Value: !Ref ApplicationName
        -
          Key: ApplicationVersion
          Value: !Ref ApplicationVersion
        -
          Key: ProjectCostCenter
          Value: !Ref ProjectCostCenter
        -
          Key: Confidentiality
          Value: !Ref Confidentiality
        -
          Key: Compliance
          Value: !Ref Compliance
    Type: "AWS::RDS::DBInstance"
  DBParamGroup:
    Type: AWS::RDS::DBParameterGroup
    Condition: IsNotMYSQLCondition
    Properties:
      Description: !Join ["- ", ["Aurora PostgreSQL DB Parameter Group for Cloudformation Stack ", !Ref DBName]]
      Family: !FindInMap [DBFamilyMap, !Ref DBEngineVersion, "family"]
      Parameters:
        application_name: !Ref ApplicationName
  RDSDBClusterParameterGroup:
    Type: AWS::RDS::DBClusterParameterGroup
    Properties:
      Description: !Join ["- ", ["Aurora MySQL Cluster Parameter Group for Cloudformation Stack ", !Ref DBName]]
      Family: !FindInMap [DBFamilyMap, !Ref DBEngineVersion, "family"]
      Parameters:
        time_zone: 
          !If
            - IsMYSQLEngineCondition
            - UTC
            - Ref: AWS::NoValue
        timezone: 
          !If 
            - IsNotMYSQLCondition
            - UTC
            - Ref: AWS::NoValue
  AuroraDBCluster:
    Type: "AWS::RDS::DBCluster"
    Properties:
      BackupRetentionPeriod: !Ref DBBackupRetentionPeriod
      DBClusterParameterGroupName: !Ref RDSDBClusterParameterGroup
      DBSubnetGroupName: !Ref AuroraDBSubnetGroup
      DatabaseName:
        !If
        - DoCreateDatabase
        - !Ref DBName
        - !Ref AWS::NoValue
      Engine: !FindInMap [DBEngineNameMap, !Ref DBEngineVersion, "enginename"]
      EngineVersion: !FindInMap [DBEngineVersionMap, !Ref DBEngineVersion, "engineversion"]
      EngineMode: !Ref DBEngineMode
      ScalingConfiguration: !If
        - IsServerlessEnabled
        - AutoPause: !Ref ServerlessAutoPause
          MaxCapacity: !Ref ServerlessMaxCapacityUnit
          MinCapacity: !Ref ServerlessMinCapacityUnit
          SecondsUntilAutoPause: !Ref ServerlessSecondsUntilAutoPause
        - !Ref AWS::NoValue
      KmsKeyId: !If [UseDatabaseEncryption, !GetAtt EncryptionKey.Arn, !Ref 'AWS::NoValue']
      MasterUserPassword: !If [DoRestoreFromSnapshot, !Ref 'AWS::NoValue', !Ref DBMasterUserPassword] 
      MasterUsername: !If [DoRestoreFromSnapshot, !Ref 'AWS::NoValue', !Ref DBMasterUsername] 
      SnapshotIdentifier: !If [DoRestoreFromSnapshot, !Ref DBSnapshotIdentifier, !Ref 'AWS::NoValue']
      Port: !Ref DBPort
      StorageEncrypted: !If [UseDatabaseEncryption, !Ref DBAllocatedStorageEncrypted, !Ref 'AWS::NoValue']
      EnableIAMDatabaseAuthentication: !If [EnableIAMDBAuth, true, !Ref 'AWS::NoValue']
      BacktrackWindow: !If [EnableBackTrack, 259200, !Ref 'AWS::NoValue']
      EnableCloudwatchLogsExports: !If [DoEnableCWLogExport, !Ref DBCWLogExports, !Ref "AWS::NoValue"]
      Tags:
        -
          Key: Name
          Value: !Sub AuroraDB-${AWS::StackName}
        -
          Key: EnvironmentStage
          Value: !Ref EnvironmentStage
        -
          Key: Application
          Value: !Ref ApplicationName
        -
          Key: ApplicationVersion
          Value: !Ref ApplicationVersion
        -
          Key: ProjectCostCenter
          Value: !Ref ProjectCostCenter
        -
          Key: Confidentiality
          Value: !Ref Confidentiality
        -
          Key: Compliance
          Value: !Ref Compliance
      VpcSecurityGroupIds:
        !If
        - CreateSecurityGroup
        - [!Ref RDSSecurityGroup]
        - [!Ref CustomDBSecurityGroup]
    UpdateReplacePolicy: Snapshot
  AuroraDBSubnetGroup:
    Properties:
      DBSubnetGroupDescription: "Subnets available for the Amazon Aurora database instance"
      SubnetIds:
        - Fn::ImportValue: !Join [ "-", [ !Ref VPCStackName, "PrivateSubnet1AID"]]
        - Fn::ImportValue: !Join [ "-", [ !Ref VPCStackName, "PrivateSubnet1BID"]]
        - Fn::ImportValue: !Join [ "-", [ !Ref VPCStackName, "PrivateSubnet1CID"]]
    Type: "AWS::RDS::DBSubnetGroup"
  RDSSecurityGroup:
    Condition: CreateSecurityGroup
    Properties:
      GroupDescription: "Allow access to database port"
      SecurityGroupEgress:
        -
          CidrIp: 0.0.0.0/0
          FromPort: -1
          IpProtocol: '-1'
          ToPort: -1
      SecurityGroupIngress:
        -
          CidrIp: !Ref DBAccessCIDR
          FromPort: !Ref DBPort
          IpProtocol: tcp
          ToPort: !Ref DBPort
      VpcId:
        Fn::ImportValue: !Join [ "-", [ !Ref VPCStackName, "VPCID"]]
      Tags:
        - Key: Name
          Value: !Sub RDSSecurityGroup-${AWS::StackName}
    Type: "AWS::EC2::SecurityGroup"
  RDSSecurityGroupIngress:
    Condition: CreateSecurityGroup
    Properties:
      GroupId: !GetAtt 'RDSSecurityGroup.GroupId'
      IpProtocol: '-1'
      SourceSecurityGroupId: !Ref RDSSecurityGroup
      Description: 'Self Reference'
    Type: 'AWS::EC2::SecurityGroupIngress'
  AuroraDBProxyRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: rds.amazonaws.com
            Action: sts:AssumeRole
      Path: /service-role/
  AuroraDBProxyPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: S3PropertyDataAccessPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: 'secretsmanager:GetSecretValue'
            Resource: 
              - arn:aws:secretsmanager:us-east-1:548714908692:secret:winenergy2-winenergy2_proxy-m9k3Hb
              - arn:aws:secretsmanager:us-east-1:548714908692:secret:winenergy2-winbilling_adapter-zOWOaq
          - Effect: Allow
            Action: 'kms:Decrypt'
            Resource: 
              - arn:aws:kms:us-east-1:548714908692:key/f98d8096-1d51-429a-887b-666f4df56b68
            Condition: 
              StringEquals:
                'kms:ViaService': 
                  - 'secretsmanager.us-east-1.amazonaws.com'
      Roles:
        - !Ref AuroraDBProxyRole
  AuroraDBProxy:
    Type: AWS::RDS::DBProxy
    Properties:
      DebugLogging: true
      DBProxyName: !Join ['', [!Ref ApplicationName, 'DBProxy']]
      EngineFamily: !FindInMap [DBEngineFamily, !Ref DBEngineVersion, "enginefamily"]
      IdleClientTimeout: 120
      RequireTLS: true
      RoleArn: !GetAtt AuroraDBProxyRole.Arn
      Auth:
        - AuthScheme: SECRETS
          SecretArn: arn:aws:secretsmanager:us-east-1:548714908692:secret:winenergy2-winenergy2_proxy-m9k3Hb
          IAMAuth: REQUIRED
        - AuthScheme: SECRETS
          SecretArn: arn:aws:secretsmanager:us-east-1:548714908692:secret:winenergy2-winbilling_adapter-zOWOaq
          IAMAuth: REQUIRED
      VpcSubnetIds:
        - Fn::ImportValue: !Join [ "-", [ !Ref VPCStackName, "PrivateSubnet1AID"]]
        - Fn::ImportValue: !Join [ "-", [ !Ref VPCStackName, "PrivateSubnet1BID"]]
  AuroraProxyTargetGroup:
    Type: AWS::RDS::DBProxyTargetGroup
    Properties: 
      ConnectionPoolConfigurationInfo: 
        ConnectionBorrowTimeout: 120
        InitQuery: !Ref 'AWS::NoValue'
        MaxConnectionsPercent: 100
        MaxIdleConnectionsPercent: 50
      DBClusterIdentifiers: 
        - !Ref AuroraDBCluster
      DBProxyName: !Ref AuroraDBProxy
      TargetGroupName: default
  CPUUtilizationAlarm1:
    Type: "AWS::CloudWatch::Alarm"
    Condition: IsServerlessDisabled
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - Ref: DBSNSTopic
      AlarmDescription: 'CPU_Utilization'
      Dimensions:
        - Name: DBInstanceIdentifier
          Value:
            Ref: AuroraDB1
      MetricName: CPUUtilization
      Statistic: Maximum
      Namespace: 'AWS/RDS'
      Threshold: 80
      Unit: Percent
      ComparisonOperator: 'GreaterThanOrEqualToThreshold'
      Period: 60
      EvaluationPeriods: 5
      TreatMissingData: 'notBreaching'
  CPUUtilizationAlarm2:
    Condition: IsDBMultiAZ
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - Ref: DBSNSTopic
      AlarmDescription: 'CPU_Utilization'
      Dimensions:
        - Name: DBInstanceIdentifier
          Value:
            Ref: AuroraDB2
      MetricName: CPUUtilization
      Statistic: Maximum
      Namespace: 'AWS/RDS'
      Threshold: 80
      Unit: Percent
      ComparisonOperator: 'GreaterThanOrEqualToThreshold'
      Period: 60
      EvaluationPeriods: 5
      TreatMissingData: 'notBreaching'
  FreeLocalStorageAlarm1:
    Type: "AWS::CloudWatch::Alarm"
    Condition: IsServerlessDisabled
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - Ref: DBSNSTopic
      AlarmDescription: 'Free Local Storage'
      Dimensions:
        - Name: DBInstanceIdentifier
          Value:
            Ref: AuroraDB1
      MetricName: 'FreeLocalStorage'
      Statistic: Average
      Namespace: 'AWS/RDS'
      Threshold: 5368709120
      Unit: Bytes
      ComparisonOperator: 'LessThanOrEqualToThreshold'
      Period: 60
      EvaluationPeriods: 5
      TreatMissingData: 'notBreaching'
  FreeLocalStorageAlarm2:
    Condition: IsDBMultiAZ
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - Ref: DBSNSTopic
      AlarmDescription: 'Free Local Storage'
      Dimensions:
        - Name: DBInstanceIdentifier
          Value:
            Ref: AuroraDB2
      MetricName: 'FreeLocalStorage'
      Statistic: Average
      Namespace: 'AWS/RDS'
      Threshold: 5368709120
      Unit: Bytes
      ComparisonOperator: 'LessThanOrEqualToThreshold'
      Period: 60
      EvaluationPeriods: 5
      TreatMissingData: 'notBreaching'
  FreeableMemoryAlarm1:
    Type: "AWS::CloudWatch::Alarm"
    Condition: IsServerlessDisabled
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - Ref: DBSNSTopic
      AlarmDescription: 'Freeable Memory'
      Dimensions:
        - Name: DBInstanceIdentifier
          Value:
            Ref: AuroraDB1
      MetricName: 'FreeableMemory'
      Statistic: Average
      Namespace: 'AWS/RDS'
      Threshold: 2147483648
      Unit: Bytes
      ComparisonOperator: 'LessThanOrEqualToThreshold'
      Period: 60
      EvaluationPeriods: 5
      TreatMissingData: 'notBreaching'
  FreeableMemoryAlarm2:
    Type: "AWS::CloudWatch::Alarm"
    Condition: IsDBMultiAZ
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - Ref: DBSNSTopic
      AlarmDescription: 'Freeable Memory'
      Dimensions:
        - Name: DBInstanceIdentifier
          Value:
            Ref: AuroraDB2
      MetricName: 'FreeableMemory'
      Statistic: Average
      Namespace: 'AWS/RDS'
      Threshold: 2147483648
      Unit: Bytes
      ComparisonOperator: 'LessThanOrEqualToThreshold'
      Period: 60
      EvaluationPeriods: 5
      TreatMissingData: 'notBreaching'
  DatabaseClusterEventSubscription:
    Type: 'AWS::RDS::EventSubscription'
    Properties:
      EventCategories:
        - failover
        - failure
        - notification
      SnsTopicArn: !Ref DBSNSTopic
      SourceIds: [!Ref AuroraDBCluster]
      SourceType: 'db-cluster'
  DatabaseInstanceEventSubscription:
    Type: 'AWS::RDS::EventSubscription'
    Condition: IsServerlessDisabled
    Properties:
      EventCategories:
        - availability
        - configuration change
        - deletion
        - failover
        - failure
        - maintenance
        - notification
        - recovery
      SnsTopicArn: !Ref DBSNSTopic
      SourceIds:
        - !Ref AuroraDB1
        - !If [IsDBMultiAZ, !Ref AuroraDB2, !Ref "AWS::NoValue"]
      SourceType: 'db-instance'
  RDSInstanceRotationSecret:
    Condition: DBPasswordRotation
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: !Join ['', ['Aurora MySQL Master User Secret ', 'for CloudFormation Stack ', !Ref 'AWS::StackName']]
      GenerateSecretString:
        SecretStringTemplate: !Sub '{"username": "${DBMasterUsername}"}'
        GenerateStringKey: "password"
        PasswordLength: 16
        ExcludeCharacters: "\"'@/\\"
  SecretRDSInstanceAttachment:
    Condition: DBPasswordRotation
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId: !Ref RDSInstanceRotationSecret
      TargetId: !Ref AuroraDBCluster
      TargetType: AWS::RDS::DBCluster
  RDSSecretRotationSchedule:
    Condition: DBPasswordRotation
    Type: AWS::SecretsManager::RotationSchedule
    DependsOn:
      - SecretRDSInstanceAttachment
    Properties:
      SecretId: !Ref RDSInstanceRotationSecret
      RotationLambdaARN: !GetAtt RDSRotationLambda.Arn
      RotationRules:
        AutomaticallyAfterDays: 89
  RDSRotationLambda:
    Condition: DBPasswordRotation
    DependsOn: CopyZips
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.7
      Role: !GetAtt LambdaExecutionRole.Arn
      Handler: lambda_function.lambda_handler
      Description: 'This is a lambda to rotate MySql user passwd'
      Environment:
        Variables:
          SECRETS_MANAGER_ENDPOINT: !Sub 'https://secretsmanager.${AWS::Region}.amazonaws.com'
      VpcConfig:
        SecurityGroupIds:
          !If
          - CreateSecurityGroup
          - [!Ref RDSSecurityGroup]
          - [!Ref CustomDBSecurityGroup]
        SubnetIds:
          - Fn::ImportValue: !Join [ "-", [ !Ref VPCStackName, "PrivateSubnet1AID"]]
          - Fn::ImportValue: !Join [ "-", [ !Ref VPCStackName, "PrivateSubnet1BID"]]
      Code:
        S3Bucket: !Ref 'LambdaZipsBucket'
        S3Key: !Sub '${QSS3KeyPrefix}functions/packages/SSMRotateLambda/lambda.zip'
      Timeout: 300
  LambdaZipsBucket:
    Condition: DBPasswordRotation
    Type: AWS::S3::Bucket
    Properties:
      Tags: []
  CopyZips:
    Condition: DBPasswordRotation
    Type: Custom::CopyZips
    Properties:
      ServiceToken: !GetAtt 'CopyZipsFunction.Arn'
      DestBucket: !Ref 'LambdaZipsBucket'
      SourceBucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      Prefix: !Ref 'QSS3KeyPrefix'
      Objects:
        - functions/packages/SSMRotateLambda/lambda.zip
  LambdaExecutionRole:
    Condition: DBPasswordRotation
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - secretsmanager.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - arn:aws:iam::aws:policy/SecretsManagerReadWrite
      Path: /
      Policies:
        - PolicyName: lambda_policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: "Allow"
                Action:
                  - "secretsmanager:DescribeSecret"
                  - "secretsmanager:GetSecretValue"
                  - "secretsmanager:PutSecretValue"
                  - "secretsmanager:UpdateSecretVersionStage"
                Resource: !Sub 'arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:*'
                Condition:
                  StringEquals:
                    secretsmanager:resource/AllowRotationLambdaArn: !Sub 'arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:SecretsManager-SecretRotation-${AWS::StackName}'
              - Effect: "Allow"
                Action:
                  - "secretsmanager:GetRandomPassword"
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - cloudformation:DescribeStacks
                Resource: '*'
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Condition: DBPasswordRotation
    DependsOn: RDSRotationLambda
    Properties:
      FunctionName: !GetAtt RDSRotationLambda.Arn
      Action: 'lambda:InvokeFunction'
      Principal: secretsmanager.amazonaws.com
  CopyZipsFunction:
    Condition: DBPasswordRotation
    Type: AWS::Lambda::Function
    Properties:
      Description: Copies objects from a source S3 bucket to a destination
      Handler: index.handler
      Runtime: python3.7
      Role: !GetAtt 'CopyZipsRole.Arn'
      Timeout: 240
      Code:
        ZipFile: |
          import json
          import logging
          import threading
          import boto3
          import cfnresponse


          def copy_objects(source_bucket, dest_bucket, prefix, objects):
              s3 = boto3.client('s3')
              for o in objects:
                  key = prefix + o
                  copy_source = {
                      'Bucket': source_bucket,
                      'Key': key
                  }
                  print('copy_source: %s' % copy_source)
                  print('dest_bucket = %s'%dest_bucket)
                  print('key = %s' %key)
                  s3.copy_object(CopySource=copy_source, Bucket=dest_bucket,
                        Key=key)


          def delete_objects(bucket, prefix, objects):
              s3 = boto3.client('s3')
              objects = {'Objects': [{'Key': prefix + o} for o in objects]}
              s3.delete_objects(Bucket=bucket, Delete=objects)


          def timeout(event, context):
              logging.error('Execution is about to time out, sending failure response to CloudFormation')
              cfnresponse.send(event, context, cfnresponse.FAILED, {}, None)


          def handler(event, context):
              # make sure we send a failure to CloudFormation if the function
              # is going to timeout
              timer = threading.Timer((context.get_remaining_time_in_millis()
                        / 1000.00) - 0.5, timeout, args=[event, context])
              timer.start()

              print('Received event: %s' % json.dumps(event))
              status = cfnresponse.SUCCESS
              try:
                  source_bucket = event['ResourceProperties']['SourceBucket']
                  dest_bucket = event['ResourceProperties']['DestBucket']
                  prefix = event['ResourceProperties']['Prefix']
                  objects = event['ResourceProperties']['Objects']
                  if event['RequestType'] == 'Delete':
                      delete_objects(dest_bucket, prefix, objects)
                  else:
                      copy_objects(source_bucket, dest_bucket, prefix, objects)
              except Exception as e:
                  logging.error('Exception: %s' % e, exc_info=True)
                  status = cfnresponse.FAILED
              finally:
                  timer.cancel()
                  cfnresponse.send(event, context, status, {}, None)
  CopyZipsRole:
    Condition: DBPasswordRotation
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      Policies:
        - PolicyName: lambda-copier
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: !Sub
                  - arn:${AWS::Partition}:s3:::${S3Bucket}/${QSS3KeyPrefix}*
                  - S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:DeleteObject
                Resource:
                  - !Sub 'arn:aws:s3:::${LambdaZipsBucket}/${QSS3KeyPrefix}*'
Outputs:
  DBName:
    Description: "Amazon Aurora database name"
    Value: !Ref DBName
    Export:
      Name: !Sub '${AWS::StackName}-DBName'
  AuroraClusterEndpoint:
    Description: "Amazon Aurora Cluster/Writer endpoint"
    Value: !Sub ${AuroraDBCluster.Endpoint.Address}
    Export:
      Name: !Sub '${AWS::StackName}-AuroraClusterEndpoint'
  AuroraReaderEndpoint:
    Description: "Amzon Aurora Reader Endpoint"
    Value:  !Sub ${AuroraDBCluster.ReadEndpoint.Address}
    Export:
      Name: !Sub '${AWS::StackName}-AuroraReaderEndpoint'
  AuroraClusterPort:
    Description: "Amazon Aurora Endpoint port"
    Value: !Sub ${AuroraDBCluster.Endpoint.Port}
    Export:
      Name: !Sub '${AWS::StackName}-AuroraClusterPort'
  AuroraClusterFullEndpoint:
    Description: "Full Amazon Aurora Cluster endpoint with port and database name"
    Value: !Sub ${AuroraDBCluster.Endpoint.Address}:${AuroraDBCluster.Endpoint.Port}/${DBName}
    Export:
      Name: !Sub '${AWS::StackName}-AuroraClusterFullEndpoint'
  AuroraMasterUsername:
    Description: "Amazon Aurora Master username"
    Value: !Ref DBMasterUsername
    Export:
      Name: !Sub '${AWS::StackName}-AuroraMasterUsername'
  AuroraMasterUserSecret:
    Condition: DBPasswordRotation
    Description: "Aurora Master User Secret ARN stored in AWS Secrets Manager"
    Value: !Ref RDSInstanceRotationSecret
    Export:
      Name: !Sub '${AWS::StackName}-AuroraMasterUserSecret'
  AuroraEncryptionKey:
    Condition: UseDatabaseEncryption
    Description: "The alias of the KMS encryption key used for storage and Performance Insights data encryption"
    Value: !Ref EncryptionKeyAlias
    Export:
      Name: !Sub '${AWS::StackName}-AuroraEncryptionKey'
  ProxyEndpoint:
    Value: !GetAtt AuroraDBProxy.Endpoint
    Description: Aurora DB Proxy Endpoint URL
    Export:
      Name: !Sub '${AWS::StackName}-ProxyEndpoint'