AWSTemplateFormatVersion: 2010-09-09
Description: A CloudFormation template to setup ECS Service and Task Definitions for use in Service Connect
Parameters:
  Container1AppProtocol:
    Description: The application protocol that's used for the port mapping. This parameter only applies to Service Connect. 
    Type: String
    Default: ""
  Container1ContainerName:
    Description: Name of container to run in Task Instance
    Type: String
    Default: ""
  Container1ImageArn:
    Description: ARN of image to use for container in Task Defintion
    Type: String
    Default: ""
  Container1ImageTag:
    Description: Image tag to be used in for this container
    Type: String
    Default: "latest"
  Container1Port:
    Description: Port to expose from the Task Instance
    Type: Number
    Default: 0
  Container1SecretsArn:
    Description: ARN of the secrets manager containing JSON elements for use in the containers environment setup.
    Type: CommaDelimitedList
    Default: ""
  Container1SecretsItemList:
    Description: Command seperated string of keys used to pull in the environment variables.
    Type: CommaDelimitedList
    Default: ""
  DesiredTaskInstancesInService:
    Type: Number
    Default: 1
  ECSTaskDefCPU:
    Description: The number of cpu units used by the task.
    Type: String
    Default: ""
  ECSTaskDefMemory:
    Description: The amount (in MiB) of memory used by the task.
    Type: String
    Default: ""
  ECSClusterStackName:
    Description: Name of the stack which created the ECS Cluster
    Type: String
  ECSServiceDeploymentController:
    Description: The deployment controller type to use. There are three deployment controller types available
    Type: String
    Default: ECS
    AllowedValues:
      - ECS
      - CODE_DEPLOY
      - EXTERNAL
  Environment:
    Description: Environment infrastructure is being deployed in
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - shared
      - prod
      - test
  LogGroup:
    Description: Name of the log group
    Type: String
    Default: "/ecs/"
  LaunchType:
    Type: String
    Default: FARGATE
    AllowedValues:
      - FARGATE
      - EC2
  NetworkMode:
    Type: String
    Description: The Docker networking mode to use for the containers in the task.
    Default: awsvpc
    AllowedValues:
      - awsvpc
      - bridge
      - host
      - none
  ECSTaskDefCpuArchitecture:
    Description: X86_64 or ARM64 for the task defintion
    Type: String
    Default: X86_64
    AllowedValues:
      - X86_64
      - ARM64
  SecurityGroupStackName:
    Type: String
    Default: ""
  SecurityGroupStackExportVariableName:
    Type: String
    Default: SecurityGroupId
  ServiceName:
    Description: Name given to the ECS Service
    Type: String
  VPCStackName:
    Description: Name of the stack used to create the VPC
    Type: String
Resources:
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      # Name of the task definition. Subsequent versions of the task definition are grouped together under this name.
      Family: !Join ["-", [!Ref ServiceName, TaskDefinition1]]
      # awsvpc is required for Fargate
      NetworkMode: !Ref NetworkMode
      # 256 (.25 vCPU) - Available memory values: 0.5GB, 1GB, 2GB
      # 512 (.5 vCPU) - Available memory values: 1GB, 2GB, 3GB, 4GB
      # 1024 (1 vCPU) - Available memory values: 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB
      # 2048 (2 vCPU) - Available memory values: Between 4GB and 16GB in 1GB increments
      # 4096 (4 vCPU) - Available memory values: Between 8GB and 30GB in 1GB increments
      Cpu: !Ref ECSTaskDefCPU
      # 0.5GB, 1GB, 2GB - Available cpu values: 256 (.25 vCPU)
      # 1GB, 2GB, 3GB, 4GB - Available cpu values: 512 (.5 vCPU)
      # 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB - Available cpu values: 1024 (1 vCPU)
      # Between 4GB and 16GB in 1GB increments - Available cpu values: 2048 (2 vCPU)
      # Between 8GB and 30GB in 1GB increments - Available cpu values: 4096 (4 vCPU)
      Memory: !Ref ECSTaskDefMemory
      # A role needed by ECS.
      # "The ARN of the task execution role that containers in this task can assume. All containers in this task are granted the permissions that are specified in this role."
      # "There is an optional task execution IAM role that you can specify with Fargate to allow your Fargate tasks to make API calls to Amazon ECR."
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      # "The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role that grants containers in the task permission to call AWS APIs on your behalf."
      TaskRoleArn: !Ref TaskRole
      RuntimePlatform: 
        CpuArchitecture: !Ref ECSTaskDefCpuArchitecture
      ContainerDefinitions:
        - Name: !Ref Container1ContainerName
          Image: !Join
            - ":"
            - - !Ref Container1ImageArn
              - !Ref Container1ImageTag
          PortMappings: 
            - ContainerPort: !Ref Container1Port
              HostPort: !Ref Container1Port
              Name: !Sub "${Container1ContainerName}-${Container1Port}"
              AppProtocol: !Ref Container1AppProtocol
              Protocol: tcp
          # Send logs to CloudWatch Logs
          Secrets:
            'Fn::Transform':
                Name: ECSSecretsTransformation
                Parameters:
                  Name: !Ref Container1SecretsItemList
                  ValueFrom: !Ref Container1SecretsArn
          LogConfiguration: 
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: ecs
              mode: non-blocking
        - !Ref AWS::NoValue
        
  # A role needed by ECS
  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ["", [!Ref ServiceName, ExecutionRole]]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: AllowECRCreateLogGroup
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 
                  - "logs:CreateLogGroup"
                Resource: "*"
        - PolicyName: AllowECRContainerPull
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 
                  - "ecr:*"
                Resource: "*"
        - PolicyName: AllowRetrieveSecrets
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "secretsmanager:GetSecretValue"
                  - "kms:Decrypt"
                Resource:
                  - "*"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
  # A role for the containers
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ["", [!Ref ServiceName, TaskRole]]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: "sts:AssumeRole"
      # ManagedPolicyArns:
      #   -
      Policies:
        - PolicyName: AllEcsExecPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "ecs:ExecuteCommand"
                  - "ssmmessages:CreateControlChannel"
                  - "ssmmessages:CreateDataChannel"
                  - "ssmmessages:OpenControlChannel"
                  - "ssmmessages:OpenDataChannel"
                Resource:
                  - "*"
        - PolicyName: AllowRetrieveSecrets
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "secretsmanager:GetSecretValue"
                  - "kms:Decrypt"
                Resource:
                  - "*"
  # A role needed for auto scaling
  Service:
    Type: AWS::ECS::Service
    # This dependency is needed so that the load balancer is setup correctly in time
    Properties:
      ServiceName: !Ref ServiceName
      Cluster:
        Fn::ImportValue: !Join ["-", [!Ref ECSClusterStackName, "Cluster"]]
      TaskDefinition: !Ref TaskDefinition
      DeploymentConfiguration: 
        MinimumHealthyPercent: 100
        MaximumPercent: 200
        DeploymentCircuitBreaker: 
          Enable: true
          Rollback: true
      DeploymentController:
        Type: !Ref ECSServiceDeploymentController
      DesiredCount: !Ref DesiredTaskInstancesInService
      LaunchType: !Ref LaunchType
      NetworkConfiguration: 
        AwsvpcConfiguration:
          # change to DISABLED if you're using private subnets that have access to a NAT gateway
          AssignPublicIp: DISABLED
          Subnets:
            - Fn::ImportValue:
                !Join ["-", [!Ref VPCStackName, "PrivateSubnet1BID"]]
            - Fn::ImportValue:
                !Join ["-", [!Ref VPCStackName, "PrivateSubnet2BID"]]
          SecurityGroups:
            - Fn::ImportValue:
                !Join [
                  "-",
                  [
                    !Ref SecurityGroupStackName,
                    !Ref SecurityGroupStackExportVariableName,
                  ],
                ]
            - sg-0862003e313464ceb
      
      PlatformVersion: 1.4.0
      ServiceConnectConfiguration: 
        Enabled: true
        LogConfiguration: 
          LogDriver: awslogs
          Options: 
            awslogs-group: !Sub 
              - "/ecs/${Environment}-${ClusterName}-serviceconnect"
              - ClusterName: 
                  Fn::ImportValue: !Join ["-", [!Ref ECSClusterStackName, "Cluster"]]
                Environment: !Ref Environment
            awslogs-region: us-east-1
            awslogs-stream-prefix: ecs
            awslogs-create-group: true
        Namespace: arn:aws:servicediscovery:us-east-1:035913458583:namespace/ns-mlyke4zmaft47ohh
        Services:
          - ClientAliases:
              - Port: !Ref Container1Port
            DiscoveryName: !Ref Container1ContainerName
            PortName: !Sub "${Container1ContainerName}-${Container1Port}"