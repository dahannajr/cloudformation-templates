AWSTemplateFormatVersion: 2010-09-09

Description: Establish a PHP server in an Auto Scaling Group with EFS support
Metadata:

  AWS::CloudFormation::Interface:

    ParameterGroups:
    - Label:
        default: Amazon EFS Parameters
      Parameters:
        - Growth
        - InstanceType
        - EC2KeyName
        - PerformanceMode
        - EncrpytedBoolean
        - Cmk
        - SecurityGroup
        - NumberOfSubnets
        - Subnet
    ParameterLabels:
      EncrpytedBoolean:
        default: Encryption state
      Cmk:
        default: KMS Key
      Growth:
        default: Add data (GiB)
      InstanceType:
        default: Instance Type
      EC2KeyName:
        default: Existing Key Pair
      NumberOfSubnets:
        default: Number of subnets
      PerformanceMode:
        default: Performance Mode
      SecurityGroup:
        default: EFS Security Group
      Subnet:
        default: Subnets
Parameters:
  RDSStackName:
    Description: Name of the stack used to create the RDS instance 
    Type: String
    Default: ''
  RDSHostName:
    Description: Host name of the RDS endpoint.  Either this or the RDS Stack name should be supplied
    Type: String
    Default: ''
  EncrpytedBoolean:
    AllowedValues:
      - true
      - false
    Default: true
    Description: Create an encrypted Amazon EFS file system.
    Type: String
  Cmk:
    Description: An existing AWS KMS Customer Master Key (CMK) to encrypt file system
    Type: String
  Growth:
    ConstraintDescription: Must be an integer.
    Default: 0
    Description: Amount of dummy data (GiB) to add to the file system (max 6144 GiB). Amazon EFS storage charges apply. 
    MaxValue: 6144
    MinValue: 0
    Type: Number
  InstanceType:
    AllowedValues:
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - t2.xlarge
      - t2.2xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - m4.16xlarge
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - c3.large
      - c3.xlarge
      - c3.2xlarge
      - c3.4xlarge
      - c3.8xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - c5.large
      - c5.xlarge
      - c5.2xlarge
      - c5.4xlarge
      - c5.8xlarge
      - r3.large
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
      - r4.large
      - r4.xlarge
      - r4.2xlarge
      - r4.4xlarge
      - r4.8xlarge
      - r4.16xlarge
      - i3.large
      - i3.xlarge
      - i3.2xlarge
      - i3.4xlarge
      - i3.8xlarge
      - i3.16xlarge
      - d2.xlarge
      - d2.2xlarge
      - d2.4xlarge
      - d2.8xlarge
      - p2.xlarge
      - p2.8xlarage
      - p2.16xlarge
      - g3.4xlarge
      - g3.8xlarge
      - g3.16xlarge
      - f1.2xlarge
      - f1.16xlarge
      - x1.16xlarge
      - x1.32xlarge
    ConstraintDescription: Must be a valid Amazon EC2 instance type.
    Default: r4.large
    Description: The Amazon EC2 instance type that adds data to the file system.
    Type: String
  EC2KeyName:
    Description: Name of an existing EC2 key pair
    Type: AWS::EC2::KeyPair::KeyName
  NumberOfSubnets:
    AllowedValues:
    - 2
    - 3
    - 4
    - 5
    - 6
    Default: 3
    Description: Number of subnets. This must match your selections in the list of Subnets below.
    Type: String 
  VPCStackName:
    Description: Name of the stack used to create the VPC environment.  Will be used for ImportValue calls.
    Type: String
  ELBStackName:
    Description: Name of the ELB Stack to Associate this Auto Scaling setup to
    Type: String
    Default: ''
  PerformanceMode:
    AllowedValues:
      - generalPurpose
      - maxIO
    Default: generalPurpose
    Description: Select the performance mode of the file system.
    Type: String
  EfsCopyDataFrom:
    Description: Clone EFS from existing EFS
    Type: String
  ApplicationDirectory:
    Description: Application installation directory
    Type: String
  SecurityGroup:
    Description: Select the Amazon EFS security group.
    Type: String  
  SubnetIDsExporttName:
    Description: Exported variables from the VPC creation stack.
    Type: CommaDelimitedList
  TagEnvironment:
    Description: Dev, Test, or Production Resource
    Type: String
    AllowedValues:
      - Dev
      - Test
      - Prod
  TagInstancePurpose:
    Description: Purpose of the compute instance
    Type: String
    AllowedValues:
      - WebApplication
      - Database
  DomainName:
    Type: String
  WebAppUser:
    Type: String
    Description: User the web server runs as
  WebAppUserUID:
    Type: String
    Description: User ID for the user created to run the web app server
Conditions:
  HasELBCondition: !Not
    - !Equals
      - !Ref ELBStackName
      - ''
  NumberOfSubnets1:
      !Equals [ 1, !Ref NumberOfSubnets ]
  NumberOfSubnets2:
      !Equals [ 2, !Ref NumberOfSubnets ]
  NumberOfSubnets3:
      !Equals [ 3, !Ref NumberOfSubnets ]
  NumberOfSubnets4:
      !Equals [ 4, !Ref NumberOfSubnets ]
  NumberOfSubnets5:
      !Equals [ 5, !Ref NumberOfSubnets ]
  NumberOfSubnets6:
      !Equals [ 6, !Ref NumberOfSubnets ]
  Subnet0: !Or
    - !Condition NumberOfSubnets1
    - !Condition NumberOfSubnets2
    - !Condition NumberOfSubnets3
    - !Condition NumberOfSubnets4
    - !Condition NumberOfSubnets5
    - !Condition NumberOfSubnets6
  Subnet1: !Or
    - !Condition NumberOfSubnets2
    - !Condition NumberOfSubnets3
    - !Condition NumberOfSubnets4
    - !Condition NumberOfSubnets5
    - !Condition NumberOfSubnets6
  Subnet2: !Or
    - !Condition NumberOfSubnets3
    - !Condition NumberOfSubnets4
    - !Condition NumberOfSubnets5
    - !Condition NumberOfSubnets6
  Subnet3: !Or
    - !Condition NumberOfSubnets4
    - !Condition NumberOfSubnets5
    - !Condition NumberOfSubnets6
  Subnet4: !Or
    - !Condition NumberOfSubnets5
    - !Condition NumberOfSubnets6
  Subnet5: !Condition NumberOfSubnets6  
  UseAWS-ManagedCMK:
    !Equals ['', !Ref Cmk]
  UseDefaultSecurityGroupCondition:
    !Equals ['', !Ref SecurityGroup]
  UseRDSStackNameCondition: !Not
    - !Equals
      - !Ref RDSStackName
      - ''
Mappings:
  RegionMap:
    ap-northeast-1:
      AMI: ami-
    ap-northeast-2:
      AMI: ami-
    ap-south-1:
      AMI: ami-
    ap-southeast-1:
      AMI: ami-
    ap-southeast-2:
      AMI: ami-
    ca-central-1:
      AMI: ami-
    eu-central-1:
      AMI: ami-
    eu-west-1:
      AMI: ami-03b934bf41e65b1c0
    eu-west-2:
      AMI: ami-
    sa-east-1:
      AMI: ami-
    us-east-1:
      AMI: ami-0e3711cf81dc0222e
    us-east-2:
      AMI: ami-
    us-west-1:
      AMI: ami-
    us-west-2:
      AMI: ami-
Resources:
  ElasticFileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      Encrypted: !Ref EncrpytedBoolean
      KmsKeyId:
        !If [ UseAWS-ManagedCMK, !Ref 'AWS::NoValue', !Ref Cmk ]
      FileSystemTags:
        - Key: Name
          Value: !Join [ '', [ 'WebApplication / ', !Ref 'AWS::StackName' ] ]
      PerformanceMode: !Ref PerformanceMode
  ElasticFileSystemMountTarget0:
    Condition: Subnet0
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref ElasticFileSystem
      SecurityGroups:
      - !If [ UseDefaultSecurityGroupCondition,  Fn::ImportValue: !Join [ "-", [ !Ref VPCStackName, "DefaultSG"]],  !Ref SecurityGroup ]
      SubnetId: 
        Fn::ImportValue: !Join [ "-", [ !Ref VPCStackName, !Select [ 0, !Ref SubnetIDsExporttName ]]]
  ElasticFileSystemMountTarget1:
    Condition: Subnet1
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref ElasticFileSystem
      SecurityGroups:
      - !If [ UseDefaultSecurityGroupCondition,  Fn::ImportValue: !Join [ "-", [ !Ref VPCStackName, "DefaultSG"]],  !Ref SecurityGroup ]
      SubnetId: 
        Fn::ImportValue: !Join [ "-", [ !Ref VPCStackName, !Select [ 1, !Ref SubnetIDsExporttName ]]]
  ElasticFileSystemMountTarget2:
    Condition: Subnet2
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref ElasticFileSystem
      SecurityGroups:
        - !If [ UseDefaultSecurityGroupCondition,  Fn::ImportValue: !Join [ "-", [ !Ref VPCStackName, "DefaultSG"]],  !Ref SecurityGroup ]
      SubnetId: 
        Fn::ImportValue: !Join [ "-", [ !Ref VPCStackName, !Select [ 2, !Ref SubnetIDsExporttName ]]]
  ElasticFileSystemMountTarget3:
    Condition: Subnet3
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref ElasticFileSystem
      SecurityGroups:
        - !If [ UseDefaultSecurityGroupCondition,  Fn::ImportValue: !Join [ "-", [ !Ref VPCStackName, "DefaultSG"]],  !Ref SecurityGroup ]
      SubnetId: 
        Fn::ImportValue: !Join [ "-", [ !Ref VPCStackName, !Select [ 3, !Ref SubnetIDsExporttName ]]]
  ElasticFileSystemMountTarget4:
    Condition: Subnet4
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref ElasticFileSystem
      SecurityGroups:
        - !If [ UseDefaultSecurityGroupCondition,  Fn::ImportValue: !Join [ "-", [ !Ref VPCStackName, "DefaultSG"]],  !Ref SecurityGroup ]
      SubnetId: 
        Fn::ImportValue: !Join [ "-", [ !Ref VPCStackName, !Select [ 4, !Ref SubnetIDsExporttName ]]]
  ElasticFileSystemMountTarget5:
    Condition: Subnet5
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref ElasticFileSystem
      SecurityGroups:
        - !If [ UseDefaultSecurityGroupCondition,  Fn::ImportValue: !Join [ "-", [ !Ref VPCStackName, "DefaultSG"]],  !Ref SecurityGroup ]
      SubnetId: 
        Fn::ImportValue: !Join [ "-", [ !Ref VPCStackName, !Select [ 5, !Ref SubnetIDsExporttName ]]]
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - !Ref InstanceRole
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: efs-create-file-system-with-storage
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
              - autoscaling:DescribeAutoScalingGroups
              - autoscaling:DescribeAutoScalingInstances
              - autoscaling:DescribePolicies
              - autoscaling:UpdateAutoScalingGroup
            Resource: '*'
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      Cooldown: 60
      HealthCheckGracePeriod: 120
      HealthCheckType: EC2
      LaunchTemplate:
        LaunchTemplateId: !Ref SectorProfileAppLaunchTemplate
        Version: !GetAtt SectorProfileAppLaunchTemplate.LatestVersionNumber
      MaxSize: 1
      MinSize: 0
      DesiredCapacity: 1
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-AppServer-EFSBacked"
          PropagateAtLaunch: true
      VPCZoneIdentifier:
        !If
          [ NumberOfSubnets1,
          [ Fn::ImportValue: !Join [ "-", [ !Ref VPCStackName, !Select [ 0, !Ref SubnetIDsExporttName ]]] ],
          !If
            [ NumberOfSubnets2,
            [ Fn::ImportValue: !Join [ "-", [ !Ref VPCStackName, !Select [ 0, !Ref SubnetIDsExporttName ]]], Fn::ImportValue: !Join [ "-", [ !Ref VPCStackName, !Select [ 1, !Ref SubnetIDsExporttName ]]] ],
            !If
              [ NumberOfSubnets3,
              [ Fn::ImportValue: !Join [ "-", [ !Ref VPCStackName, !Select [ 0, !Ref SubnetIDsExporttName ]]], Fn::ImportValue: !Join [ "-", [ !Ref VPCStackName, !Select [ 1, !Ref SubnetIDsExporttName ]]], Fn::ImportValue: !Join [ "-", [ !Ref VPCStackName, !Select [ 2, !Ref SubnetIDsExporttName ]]] ],
              !If
                [ NumberOfSubnets4,
                [ Fn::ImportValue: !Join [ "-", [ !Ref VPCStackName, !Select [ 0, !Ref SubnetIDsExporttName ]]], Fn::ImportValue: !Join [ "-", [ !Ref VPCStackName, !Select [ 1, !Ref SubnetIDsExporttName ]]], Fn::ImportValue: !Join [ "-", [ !Ref VPCStackName, !Select [ 2, !Ref SubnetIDsExporttName ]]], Fn::ImportValue: !Join [ "-", [ !Ref VPCStackName, !Select [ 3, !Ref SubnetIDsExporttName ]]] ],
                !If
                  [ NumberOfSubnets5,
                  [ Fn::ImportValue: !Join [ "-", [ !Ref VPCStackName, !Select [ 0, !Ref SubnetIDsExporttName ]]], Fn::ImportValue: !Join [ "-", [ !Ref VPCStackName, !Select [ 1, !Ref SubnetIDsExporttName ]]], Fn::ImportValue: !Join [ "-", [ !Ref VPCStackName, !Select [ 2, !Ref SubnetIDsExporttName ]]], Fn::ImportValue: !Join [ "-", [ !Ref VPCStackName, !Select [ 3, !Ref SubnetIDsExporttName ]]], Fn::ImportValue: !Join [ "-", [ !Ref VPCStackName, !Select [ 4, !Ref SubnetIDsExporttName ]]] ],
                  [ Fn::ImportValue: !Join [ "-", [ !Ref VPCStackName, !Select [ 0, !Ref SubnetIDsExporttName ]]], Fn::ImportValue: !Join [ "-", [ !Ref VPCStackName, !Select [ 1, !Ref SubnetIDsExporttName ]]], Fn::ImportValue: !Join [ "-", [ !Ref VPCStackName, !Select [ 2, !Ref SubnetIDsExporttName ]]], Fn::ImportValue: !Join [ "-", [ !Ref VPCStackName, !Select [ 3, !Ref SubnetIDsExporttName ]]], Fn::ImportValue: !Join [ "-", [ !Ref VPCStackName, !Select [ 4, !Ref SubnetIDsExporttName ]]], Fn::ImportValue: !Join [ "-", [ !Ref VPCStackName, !Select [ 5, !Ref SubnetIDsExporttName ]]] ]
                  ]
                ]
              ]
            ]
          ]
      TargetGroupARNs:
        - !If 
          - HasELBCondition
          - Fn::ImportValue: !Join [ "-", [ !Ref ELBStackName, "TargetGroupARN"]]
          - !Ref AWS::NoValue
    CreationPolicy:
      ResourceSignal:
        Count: 0
        Timeout: PT12H
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: true
  AutoScalingPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AutoScalingGroup
      Cooldown: 60
      PolicyType: SimpleScaling
      ScalingAdjustment: 1
  SectorProfileAppLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    DependsOn:
      - ElasticFileSystem
    Properties:
      LaunchTemplateData:
        InstanceType: !Ref InstanceType
        DisableApiTermination: false
        KeyName: !Ref EC2KeyName
        ImageId: !FindInMap [ RegionMap, !Ref 'AWS::Region', AMI ]
        SecurityGroupIds:
        - !If [ UseDefaultSecurityGroupCondition,  Fn::ImportValue: !Join [ "-", [ !Ref VPCStackName, "DefaultSG"]],  !Ref SecurityGroup ]
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Environment
                Value: !Ref TagEnvironment
              - Key: Purpose
                Value: !Ref TagInstancePurpose
        UserData:
          Fn::Base64: !Sub
            - |
              #cloud-config
              package_update: true
              package_upgrade: true
              write_files:
                - content: |
                    SetEnv RDS_PASSWORD "rdslivegmp"
                    SetEnv RDS_HOSTNAME "${RDS_HOSTNAME}"
                    SetEnv RDS_PORT "3306"
                    SetEnv RDS_DB_NAME "ebdb"
                    SetEnv PARAM1 "infosecurity"
                    SetEnv RDS_USERNAME "ebroot"
                    SetEnv COMPOSER_HOME "/root"
                    SetEnv PHP_MEMORY_LIMIT "256M"
                    SetEnv PHP_MAX_EXECUTION_TIME "60"
                    SetEnv PHP_DISPLAY_ERRORS "Off"
                    SetEnv PHP_COMPOSER_OPTIONS ""
                    SetEnv PHP_ALLOW_URL_FOPEN "On"
                    SetEnv PHP_ZLIB_OUTPUT_COMPRESSION "Off"
                    SetEnv PHP_DOCUMENT_ROOT "/public"
                    SetEnv PHP_DATE_TIMEZONE "UTC"
                  owner: root:root
                  path: /etc/httpd/conf.d/aws_env.conf
                  permissions: '0644'
                - content: |
                    RDS_PASSWORD="rdslivegmp"
                    aws.rds_password="rdslivegmp"
                    RDS_HOSTNAME="sectorglobal-dev-aurora-auroradbcluster-bey7r9vr9as.cluster-crsphoh5slrn.eu-west-1.rds.amazonaws.com"
                    aws.rds_hostname="sectorglobal-dev-aurora-auroradbcluster-bey7r9vr9as.cluster-crsphoh5slrn.eu-west-1.rds.amazonaws.com"
                    RDS_PORT="3306"
                    aws.rds_port="3306"
                    RDS_DB_NAME="ebdb"
                    aws.rds_db_name="ebdb"
                    PARAM1="infosecurity"
                    aws.param1="infosecurity"
                    RDS_USERNAME="ebroot"
                    aws.rds_username="ebroot"
                    COMPOSER_HOME="/root"
                    aws.composer_home="/root"
                    PHP_MEMORY_LIMIT="256M"
                    aws.php_memory_limit="256M"
                    PHP_MAX_EXECUTION_TIME="60"
                    aws.php_max_execution_time="60"
                    PHP_DISPLAY_ERRORS="Off"
                    aws.php_display_errors="Off"
                    PHP_COMPOSER_OPTIONS=""
                    aws.php_composer_options=""
                    PHP_ALLOW_URL_FOPEN="On"
                    aws.php_allow_url_fopen="On"
                    PHP_ZLIB_OUTPUT_COMPRESSION="Off"
                    aws.php_zlib_output_compression="Off"
                    PHP_DOCUMENT_ROOT="/public"
                    aws.php_document_root="/public"
                    PHP_DATE_TIMEZONE="UTC"
                    aws.php_date_timezone="UTC"
                    aws.log_dir="/var/app/support/logs"
                  owner: root:root
                  path: /etc/php-5.5.d/environment.ini
                  permissions: '0644'
              runcmd:
                - yum install -y amazon-efs-utils
                - yum install -y nfs-utils
                - file_system_id_1=${ElasticFileSystem.FileSystemId}
                - efs_mount_point_1=/mnt/efs/fs1
                - mkdir -p "${!efs_mount_point_1}"
                - test -f "/sbin/mount.efs" && printf "\n${!file_system_id_1}:/ ${!efs_mount_point_1} efs tls,_netdev\n" >> /etc/fstab || printf "\n${!file_system_id_1}.efs.eu-west-1.amazonaws.com:/ ${!efs_mount_point_1} nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport,_netdev 0 0\n" >> /etc/fstab
                - test -f "/sbin/mount.efs" && printf "\n[client-info]\nsource=liw\n" >> /etc/amazon/efs/efs-utils.conf
                - retryCnt=15; waitTime=30; while true; do mount -a -t efs,nfs4 defaults; if [ $? = 0 ] || [ $retryCnt -lt 1 ]; then echo File system mounted successfully; break; fi; echo File system not available, retrying to mount.; ((retryCnt--)); sleep $waitTime; done;
                - adduser ${WebAppUser} -u ${WebAppUserUID} -U --no-create-home -s /sbin/nologin
                - chown ${WebAppUser}:${WebAppUser} /var/www/html
                - ln -s /mnt/efs/fs1/${DomainName} /var/www/html
                - sed -i 's/webapp/${WebAppUser}/g' /etc/httpd/conf/httpd.conf 
                - service httpd start
            - RDS_HOSTNAME: !If
                - UseRDSStackNameCondition
                - Fn::ImportValue: !Join [ "-", [ !Ref RDSStackName, 'AuroraClusterEndpoint']] 
                - !Ref RDSHostName
      LaunchTemplateName: !Sub '${AWS::StackName}-SectorProfileAppLaunchTemplate'
  EfsSizeMonitorFunction:
    Type: AWS::Lambda::Function
    Properties: 
      Code:
        ZipFile: !Sub |
          import boto3
          import os
          import sys

          def handler(event, context):
              if not os.environ.get('filesystemid'):
                  print "Unable to get the environment variable filesystemid"
                  sys.exit(1)
              else:
                  filesystemid = os.environ.get('filesystemid')

              if not os.environ.get('region'):
                  print "Unable to get the environment variable region"
                  sys.exit(1)
              else:
                  region = os.environ.get('region')

              def efs_get_size():
                  client = boto3.client('efs')
                  response = client.describe_file_systems(FileSystemId=filesystemid)
                  k = response['FileSystems'][0]['SizeInBytes']['Value']
                  return k

              def cloudwatch_put_metric():
                  client = boto3.client('cloudwatch')
                  client.put_metric_data(
                      MetricData=[
                          {
                              'MetricName': 'SizeInBytes',
                              'Dimensions': [
                                  {
                                      'Name': 'FileSystemId',
                                      'Value': filesystemid
                                  },
                              ],
                              'Unit': 'None',
                              'Value': efs_get_size()
                          },
                      ],
                      Namespace='Custom/EFS'
                  )
                  print('CloudWatch metric SizeInBytes sucessfully updated.')

              cloudwatch_put_metric()
      Description: Lambda function to update the SizeInBytes EFS CloudWatch metric
      Environment:
        Variables:
          filesystemid: !Ref ElasticFileSystem
          region: !Ref 'AWS::Region'
      FunctionName: !Join [ '', [ 'efs-', !Ref ElasticFileSystem, '-size-monitor' ] ]
      Handler: index.handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: python2.7
      Timeout: 60
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/CloudWatchFullAccess
      - arn:aws:iam::aws:policy/AmazonElasticFileSystemReadOnlyAccess
  EfsLambdaPermission: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !Ref EfsSizeMonitorFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EfsSizeMonitorEvent.Arn
  EfsSizeMonitorEvent:
    Type: AWS::Events::Rule
    Properties: 
      Description: Scheduled event to update SizeInBytes EFS CloudWatch metric
      Name: !Join [ '', [ 'efs-', !Ref ElasticFileSystem, '-size-monitor-scheduled-event' ] ]
      ScheduleExpression: rate(1 minute)
      State: ENABLED
      Targets:
        - Arn: !GetAtt EfsSizeMonitorFunction.Arn
          Id: 1
Outputs:
  ElasticFileSystem:
    Value: !Ref ElasticFileSystem
    Export:
      Name: !Sub '${AWS::StackName}-ElasticFileSystem'
  ElasticFileSystemDnsName:
    Description: DNS name for the Amazon EFS file system.
    Value: !Join [ '.', [ !Ref ElasticFileSystem, 'efs', !Ref 'AWS::Region', 'amazonaws', 'com' ] ]
    Export:
      Name: !Sub '${AWS::StackName}-ElasticFileSystemDnsName'
  ElasticFileSystemMountCommand:
    Description: Mount command for mounting the Amazon EFS file system.
    Value: !Join [ '', [ 'sudo mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 ', !Join [ '.', [ !Ref ElasticFileSystem, 'efs', !Ref 'AWS::Region', 'amazonaws', 'com:/', '/', !Ref ElasticFileSystem ] ] ] ]
    Export:
      Name: !Sub '${AWS::StackName}-ElasticFileSystemMountCommand'
  AutoScalingGroup:
    Value: !Ref AutoScalingGroup
    Export:
      Name: !Sub '${AWS::StackName}-AutoScalingGroup'
  WebAppUser:
    Value: !Ref WebAppUser
    Export:
      Name: !Sub '${AWS::StackName}-WebAppUser'
  WebAppUserUID:
    Value: !Ref WebAppUserUID
    Export:
      Name: !Sub '${AWS::StackName}-WebAppUserUID'